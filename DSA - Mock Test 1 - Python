
#Move Zeroes
#Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

#Note that you must do this in-place without making a copy of the array.

#Example 1:
#Input: nums = [0,1,0,3,12]
#Output: [1,3,12,0,0]

#Example 2:
#Input: nums = [0]
#Output: [0]

#Constraints:
#a. 1 <= nums.length <= 10^4
#b. -2^31 <= nums[i] <= 2^31 - 1

def moveZeroes(nums):
    left = 0
    right = 0
    while right < len(nums):
        if nums[right] != 0:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
        right += 1
        
    while left < len(nums):
        nums[left] = 0
        left += 1
        
 #Example 1:       

nums = [0, 1, 0, 3, 12]
moveZeroes(nums)
print(nums)    
        
#Example 2

nums = [0]
moveZeroes(nums)
print(nums)



#First Unique Character in a String

#Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

#Example 1:
#Input: s = "leetcode"
#Output: 0

#Example 2:
#Input: s = "loveleetcode"
#Output: 2

#Example 3:
#Input: s = "aabb"
#Output: -1

#Constraints:
#a. 1 <= s.length <= 10^5
#b. s consists of only lowercase English letters.

def firstuniqchar(s):
    charCount = {}
    
    # update character count
    for char in s:
        charCount[char] = charCount.get(char,0)+1
        
    # Find first non-repeating character
    for i in range(len(s)):
        if charCount[s[i]] == 1:
            return -1
        
    return -1


# Example-:

s = "leetcode"
print (firstuniqchar(s))
    
#Example 2:

s = "loveleetcode"
print(firstuniqchar(s))

#Example 3:

s = "aabb"
print(firstuniqchar(s))
